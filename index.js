// Importation des d√©pendances
const { Client, Events, Partials, getMessages } =  require("discord.js");

// Cr√©ation du client Discord
const client = new Client({
    intents: [65307],
    partials: [
        Partials.Message,
        Partials.Reaction
    ]
});

// import et configuration du .env
const dotenv = require("dotenv");
dotenv.config();
// R√©cup√©ration du token
const token = process.env.TOKEN;

// On pr√©viens que le bot est pret
client.on("ready", () => {
    console.log(`${client.user.tag} ready!`);
    // Param√©tres affich√© du bot
    client.user.setPresence({
        // Activit√© 'joue a'
        activities: [{
            name: "bidouiller le discord"
        }],
        // Status du bot
        status: "dnd"
    });
});

// SCRIPT
// D√©claration du pr√©fix d'une commande
const PREFIX = "/!";

// R√©pondre a un message command
client.on("messageCreate", (message) => {
    if(message.content.startsWith(PREFIX)) {

    // R√©agir au message
    // retire le prefix et entre chaque mot du contenu dans un tableau
        //splice: enleve le pr√©fix / trim: enleve les espaces au d√©but et a la fin / split: supprime les espaces entre les mots
        const input = message.content.slice(PREFIX.length).trim().split(" "); 
    // Sort le premier mot du tableau (enregistre le nom de la commande)
        const command = input.shift();
    // Enregistre le reste du message a part
        const content = "```" + " " + message.content.slice(PREFIX.length).slice(command.length + 1) + " " + "```";
        let channelLog = message.guild.channels.cache.get("1147165731235045497");
        if (command === "aide") {
            channelLog.send(`La commande ${command} a √©t√© envoy√© par ${message.author.username} et contient : ${content} `);
        }

    // R√©pondre a une commande
        switch(command) {
        // D√©finition du text exacte de la command(ici 'aide')
            case "aide":
            // D√©finition du message envoy√© en retour
                message.channel.send("Je vous envoie de l'aide!")
                // Mise en place d'une suppression du message command
                    .then(() => {
                        message.delete();
                    })
                    .catch(console.log);
            break;

        // Clear des messages du channel
            case "clear":
            // R√©cup√©ration du channel id
                const channel = message.channelId
                const messages = getMessages(channel)
                console.log(messages)
            break

        // D√©finition du text exacte de la command(ici 'hello')
            case "hello":
            // D√©finition du message envoy√© en retour
                message.channel.send("Bonjour!");
            break;

        // Mise en place d'une r√©ponse direct au message command si le nom de commande n'est pas list√© dans switch
            default:
                message.reply("Cette commande n'existe pas.");
        }
    }
});

// R√©ponse aux r√©action
client.on("messageReactionAdd", async (reaction) => {
// Si l'autheur du message qui a la r√©action d√©finit, alors supprime le message
//! Le contexte / la gestion d'instance du bot ne permet pas de supprimer des messages g√©n√©r√© avant un reboot ou autre.
    if (reaction.message.author !== null && reaction.message.author.username === "PboT" && reaction.emoji.name === "üëå") {
        reaction.message.delete();
        let channelLog = reaction.message.guild.channels.cache.get("1147165731235045497");
        if (reaction.message.content !== null) {
            console.log(reaction.message)
            const message = "```" + " " + reaction.message.content + " " + "```"
            channelLog.send(`Le message du bot a √©t√© valid√© et supprim√©. Message :` + message);
        } else {
            channelLog.send(`Le message du bot a √©t√© valid√© et supprim√©.`);
        }
    }
});

// Connexion du bot avec sont token
client.login(token);